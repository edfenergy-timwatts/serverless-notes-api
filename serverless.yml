service: notes-app-backend 

# Create a single package per Lambda function (default behaviour is one package for all)
package:
  individually: true

plugins:
  - serverless-bundle          # Use Webpack 4 to optimise packages for Lambda (by dropping redundant dependencies)
  - serverless-offline         # Helpful for local development
  - serverless-dotenv-plugin   # Load .env files as Lambda environment variables

custom:
  stage: ${opt:stage, self:provider.stage}   # Use --stage parameter or, if not provided, use default below
  tableName: ${self:custom.stage}-notes      # Prefix table name with stage; definition here supports local testing

provider:
  name: aws
  runtime: nodejs10.x
  profile: dev-user            # Governs .aws/credentials usage; alternatively set AWS_PROFILE before running sls
  stage: dev
  region: eu-west-2

# Define process.env variables for reference by multiple Lambda functions
  environment:
    tableName: ${self:custom.tableName}

# Define permissions set for Lambda functions to access DynamoDB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]   # Restrict by ARN using ref defined in ./resources/dynamodb-table.yml

functions:
  create:
    handler: create.main
    events:
      - http:
          path: /notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: /notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: /notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: /notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events:
      - http:
          path: /notes
          method: get
          cors: true
          authorizer: aws_iam

# Create additional backend resources using specific CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
